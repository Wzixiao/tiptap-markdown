{"version":3,"file":"tiptap-markdown.umd.js","sources":["../src/util/dom.js","../src/extensions/tiptap/clipboard.js","../src/extensions/tiptap/tight-lists.js","../src/extensions/nodes/blockquote.js","../src/extensions/nodes/bullet-list.js","../src/extensions/nodes/code-block.js","../src/extensions/nodes/html.js","../src/extensions/nodes/hard-break.js","../src/extensions/nodes/heading.js","../src/extensions/nodes/horizontal-rule.js","../src/extensions/nodes/image.js","../src/extensions/nodes/list-item.js","../src/extensions/nodes/ordered-list.js","../src/extensions/nodes/paragraph.js","../src/util/prosemirror.js","../src/extensions/nodes/table.js","../src/extensions/nodes/task-item.js","../src/extensions/nodes/task-list.js","../src/extensions/nodes/text.js","../src/extensions/marks/bold.js","../src/extensions/marks/code.js","../src/extensions/marks/html.js","../src/extensions/marks/italic.js","../src/extensions/marks/link.js","../src/extensions/marks/strike.js","../src/extensions/index.js","../src/util/extensions.js","../src/parse/MarkdownParser.js","../src/util/markdown.js","../src/serialize/state.js","../src/serialize/MarkdownSerializer.js","../src/Markdown.js"],"sourcesContent":["\n\nexport function elementFromString(value) {\n    // add a wrapper to preserve leading and trailing whitespace\n    const wrappedValue = `<body>${value}</body>`\n\n    return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n\nexport function escapeHTML(value) {\n    return value\n        ?.replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n\nexport function extractElement(node) {\n    const parent = node.parentElement;\n    const prepend = parent.cloneNode();\n\n    while(parent.firstChild && parent.firstChild !== node) {\n        prepend.appendChild(parent.firstChild);\n    }\n\n    if(prepend.childNodes.length > 0) {\n        parent.parentElement.insertBefore(prepend, parent);\n    }\n    parent.parentElement.insertBefore(node, parent);\n    if(parent.childNodes.length === 0) {\n        parent.remove();\n    }\n}\n\nexport function unwrapElement(node) {\n    const parent = node.parentNode;\n\n    while (node.firstChild) parent.insertBefore(node.firstChild, node);\n\n    parent.removeChild(node);\n}\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\nimport { DOMParser } from '@tiptap/pm/model';\nimport { elementFromString } from \"../../util/dom\";\n\nexport const MarkdownClipboard = Extension.create({\n    name: 'markdownClipboard',\n    addOptions() {\n        return {\n            transformPastedText: false,\n            transformCopiedText: false,\n        }\n    },\n    addProseMirrorPlugins() {\n        return [\n            new Plugin({\n                key: new PluginKey('markdownClipboard'),\n                props: {\n                    clipboardTextParser: (text, context, plainText) => {\n                        if(plainText || !this.options.transformPastedText) {\n                            return null; // pasting with shift key prevents formatting\n                        }\n                        const parsed = this.editor.storage.markdown.parser.parse(text, { inline: true });\n                        return DOMParser.fromSchema(this.editor.schema)\n                            .parseSlice(elementFromString(parsed), {\n                                preserveWhitespace: true,\n                                context,\n                            });\n                    },\n                    /**\n                     * @param {import('prosemirror-model').Slice} slice\n                     */\n                    clipboardTextSerializer: (slice) => {\n                        if(!this.options.transformCopiedText) {\n                            return null;\n                        }\n                        return this.editor.storage.markdown.serializer.serialize(slice.content);\n                    },\n                },\n            })\n        ]\n    }\n})\n","import { Extension } from \"@tiptap/core\";\n\nexport const MarkdownTightLists = Extension.create({\n    name: 'markdownTightLists',\n    addOptions: () => ({\n        tight: true,\n        tightClass: 'tight',\n        listTypes: [\n            'bulletList',\n            'orderedList',\n        ],\n    }),\n    addGlobalAttributes() {\n        return [\n            {\n                types: this.options.listTypes,\n                attributes: {\n                    tight: {\n                        default: this.options.tight,\n                        parseHTML: element =>\n                            element.getAttribute('data-tight') === 'true' || !element.querySelector('p'),\n                        renderHTML: attributes => ({\n                            class: attributes.tight ? this.options.tightClass : null,\n                            'data-tight': attributes.tight ? 'true' : null,\n                        }),\n                    },\n                },\n            },\n        ]\n    },\n    addCommands() {\n        return {\n            toggleTight: (tight = null) => ({ editor, commands }) => {\n                function toggleTight(name) {\n                    if(!editor.isActive(name)) {\n                        return false;\n                    }\n                    const attrs = editor.getAttributes(name);\n                    return commands.updateAttributes(name, {\n                        tight: tight ?? !attrs?.tight,\n                    });\n                }\n                return this.options.listTypes\n                    .some(name => toggleTight(name));\n            }\n        }\n    },\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Blockquote = Node.create({\n    name: 'blockquote',\n});\n\nexport default Blockquote.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.blockquote,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst BulletList = Node.create({\n    name: 'bulletList',\n});\n\nexport default BulletList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    return state.renderList(node, \"  \", () => (this.editor.storage.markdown.options.bulletListMarker || \"-\") + \" \");\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst CodeBlock = Node.create({\n    name: 'codeBlock',\n});\n\nexport default CodeBlock.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    state.write(\"```\" + (node.attrs.language || \"\") + \"\\n\");\n                    state.text(node.textContent, false);\n                    state.ensureNewLine();\n                    state.write(\"```\");\n                    state.closeBlock(node);\n                },\n                parse: {\n                    setup(markdownit) {\n                        markdownit.set({\n                            langPrefix: this.options.languageClassPrefix ?? 'language-',\n                        });\n                    },\n                    updateDOM(element) {\n                        element.innerHTML = element.innerHTML.replace(/\\n<\\/code><\\/pre>/g, '</code></pre>')\n                    },\n                },\n            }\n        }\n    }\n});\n","import { Fragment } from \"@tiptap/pm/model\";\nimport { getHTMLFromFragment, Node } from \"@tiptap/core\";\nimport { elementFromString } from \"../../util/dom\";\n\n\nexport default Node.create({\n    name: 'markdownHTMLNode',\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent) {\n                    if(this.editor.storage.markdown.options.html) {\n                        state.write(serializeHTML(node, parent));\n                    } else {\n                        console.warn(`Tiptap Markdown: \"${node.type.name}\" node is only available in html mode`);\n                        state.write(`[${node.type.name}]`);\n                    }\n                    if(node.isBlock) {\n                        state.closeBlock(node);\n                    }\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n\nfunction serializeHTML(node, parent) {\n    const schema = node.type.schema;\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\n\n    if(node.isBlock && (parent instanceof Fragment || parent.type.name === schema.topNodeType.name)) {\n        return formatBlock(html);\n    }\n\n    return html;\n}\n\n/**\n * format html block as per the commonmark spec\n */\nfunction formatBlock(html) {\n    const dom = elementFromString(html);\n    const element = dom.firstElementChild;\n\n    element.innerHTML = element.innerHTML.trim()\n        ? `\\n${element.innerHTML}\\n`\n        : `\\n`;\n\n    return element.outerHTML;\n}\n","import { Node } from \"@tiptap/core\";\nimport HTMLNode from './html';\n\nconst HardBreak = Node.create({\n    name: 'hardBreak',\n});\n\nexport default HardBreak.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent, index) {\n                    for (let i = index + 1; i < parent.childCount; i++)\n                        if (parent.child(i).type != node.type) {\n                            state.write(\n                                state.inTable\n                                    ? HTMLNode.storage.markdown.serialize.call(this, state, node, parent)\n                                    : \"\\\\\\n\"\n                            );\n                            return;\n                        }\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Heading = Node.create({\n    name: 'heading',\n});\n\nexport default Heading.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.heading,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst HorizontalRule = Node.create({\n    name: 'horizontalRule',\n});\n\nexport default HorizontalRule.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.horizontal_rule,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Image = Node.create({\n    name: 'image',\n});\n\nexport default Image.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.image,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst ListItem = Node.create({\n    name: 'listItem',\n});\n\nexport default ListItem.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.list_item,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst OrderedList = Node.create({\n    name: 'orderedList',\n});\n\nfunction findIndexOfAdjacentNode(node, parent, index) {\n    let i = 0;\n    for (; index - i > 0; i++) {\n        if (parent.child(index - i - 1).type.name !== node.type.name) {\n            break;\n        }\n    }\n    return i;\n}\n\nexport default OrderedList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent, index) {\n                    const start = node.attrs.start || 1\n                    const maxW = String(start + node.childCount - 1).length\n                    const space = state.repeat(\" \", maxW + 2)\n                    const adjacentIndex = findIndexOfAdjacentNode(node, parent, index);\n                    const separator = adjacentIndex % 2 ? ') ' : '. ';\n                    state.renderList(node, space, i => {\n                        const nStr = String(start + i)\n                        return state.repeat(\" \", maxW - nStr.length) + nStr + separator;\n                    })\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Paragraph = Node.create({\n    name: 'paragraph',\n});\n\nexport default Paragraph.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.paragraph,\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n","\n\nexport function childNodes(node) {\n    return node?.content?.content ?? [];\n}\n","import { Node } from \"@tiptap/core\";\nimport { childNodes } from \"../../util/prosemirror\";\nimport HTMLNode from './html';\n\nconst Table = Node.create({\n    name: 'table',\n});\n\nexport default Table.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent) {\n                    if(!isMarkdownSerializable(node)) {\n                        HTMLNode.storage.markdown.serialize.call(this, state, node, parent);\n                        return;\n                    }\n                    state.inTable = true;\n                    node.forEach((row, p, i) => {\n                        state.write('| ');\n                        row.forEach((col, p, j) => {\n                            if(j) {\n                                state.write(' | ');\n                            }\n                            const cellContent = col.firstChild;\n                            if(cellContent.textContent.trim()) {\n                                state.renderInline(cellContent);\n                            }\n                        });\n                        state.write(' |')\n                        state.ensureNewLine();\n                        if(!i) {\n                            const delimiterRow = Array.from({length: row.childCount}).map(() => '---').join(' | ');\n                            state.write(`| ${delimiterRow} |`);\n                            state.ensureNewLine();\n                        }\n                    });\n                    state.closeBlock(node);\n                    state.inTable = false;\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n})\n\n\nfunction hasSpan(node) {\n    return node.attrs.colspan > 1 || node.attrs.rowspan > 1;\n}\n\nfunction isMarkdownSerializable(node) {\n    const rows = childNodes(node);\n    const firstRow = rows[0];\n    const bodyRows = rows.slice(1);\n\n    if(childNodes(firstRow).some(cell => cell.type.name !== 'tableHeader' || hasSpan(cell) || cell.childCount > 1)) {\n        return false;\n    }\n\n    if(bodyRows.some(row =>\n        childNodes(row).some(cell => cell.type.name === 'tableHeader' || hasSpan(cell) || cell.childCount > 1)\n    )) {\n        return false;\n    }\n\n    return true;\n}\n","import { Node } from \"@tiptap/core\";\n\n\nconst TaskItem = Node.create({\n    name: 'taskItem',\n});\n\nexport default TaskItem.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    const check = node.attrs.checked ? '[x]' : '[ ]';\n                    state.write(`${check} `);\n                    state.renderContent(node);\n                },\n                parse: {\n                    updateDOM(element) {\n                        [...element.querySelectorAll('.task-list-item')]\n                            .forEach(item => {\n                                const input = item.querySelector('input');\n                                item.setAttribute('data-type', 'taskItem');\n                                if(input) {\n                                    item.setAttribute('data-checked', input.checked);\n                                    input.remove();\n                                }\n                            });\n                    },\n                }\n            }\n        }\n    }\n});\n","import taskListPlugin from \"markdown-it-task-lists\";\nimport { Node } from \"@tiptap/core\";\nimport BulletList from \"./bullet-list\";\n\n\nconst TaskList = Node.create({\n    name: 'taskList',\n});\n\nexport default TaskList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: BulletList.storage.markdown.serialize,\n                parse: {\n                    setup(markdownit) {\n                        markdownit.use(taskListPlugin);\n                    },\n                    updateDOM(element) {\n                        [...element.querySelectorAll('.contains-task-list')]\n                            .forEach(list => {\n                                list.setAttribute('data-type', 'taskList');\n                            });\n                    },\n                }\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { escapeHTML } from \"../../util/dom\";\n\n\nconst Text = Node.create({\n    name: 'text',\n});\n\nexport default Text.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    state.text(escapeHTML(node.text));\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Bold = Mark.create({\n    name: 'bold',\n});\n\nexport default Bold.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.strong,\n                parse: {\n                    // handled by markdown-it\n                }\n            },\n        }\n    }\n});\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Code = Mark.create({\n    name: 'code',\n});\n\nexport default Code.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.code,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Fragment } from \"@tiptap/pm/model\";\nimport { getHTMLFromFragment, Mark } from \"@tiptap/core\";\n\n\nexport default Mark.create({\n    name: 'markdownHTMLMark',\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: {\n                    open(state, mark)  {\n                        if(!this.editor.storage.markdown.options.html) {\n                            console.warn(`Tiptap Markdown: \"${mark.type.name}\" mark is only available in html mode`);\n                            return '';\n                        }\n                        return getMarkTags(mark)?.[0] ?? '';\n                    },\n                    close(state, mark) {\n                        if(!this.editor.storage.markdown.options.html) {\n                            return '';\n                        }\n                        return getMarkTags(mark)?.[1] ?? '';\n                    },\n                },\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n});\n\nfunction getMarkTags(mark) {\n    const schema = mark.type.schema;\n    const node = schema.text(' ', [mark]);\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\n    const match = html.match(/^(<.*?>) (<\\/.*?>)$/);\n    return match ? [match[1], match[2]] : null;\n}\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Italic = Mark.create({\n    name: 'italic',\n});\n\nexport default Italic.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.em,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Link = Mark.create({\n    name: 'link',\n});\n\nexport default Link.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.link,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\n\n\nconst Strike = Mark.create({\n    name: 'strike',\n});\n\nexport default Strike.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: {open: '~~', close: '~~', expelEnclosingWhitespace: true},\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n","import Blockquote from \"./nodes/blockquote\";\nimport BulletList from \"./nodes/bullet-list\";\nimport CodeBlock from \"./nodes/code-block\";\nimport HardBreak from \"./nodes/hard-break\";\nimport Heading from \"./nodes/heading\";\nimport HorizontalRule from \"./nodes/horizontal-rule\";\nimport HTMLNode from \"./nodes/html\";\nimport Image from \"./nodes/image\";\nimport ListItem from \"./nodes/list-item\";\nimport OrderedList from \"./nodes/ordered-list\";\nimport Paragraph from \"./nodes/paragraph\";\nimport Table from \"./nodes/table\";\nimport TaskItem from \"./nodes/task-item\";\nimport TaskList from \"./nodes/task-list\";\nimport Text from \"./nodes/text\";\n\nimport Bold from \"./marks/bold\";\nimport Code from \"./marks/code\";\nimport HTMLMark from \"./marks/html\";\nimport Italic from \"./marks/italic\";\nimport Link from \"./marks/link\";\nimport Strike from \"./marks/strike\";\n\n\nexport default [\n    Blockquote,\n    BulletList,\n    CodeBlock,\n    HardBreak,\n    Heading,\n    HorizontalRule,\n    HTMLNode,\n    Image,\n    ListItem,\n    OrderedList,\n    Paragraph,\n    Table,\n    TaskItem,\n    TaskList,\n    Text,\n\n    Bold,\n    Code,\n    HTMLMark,\n    Italic,\n    Link,\n    Strike,\n]\n","import markdownExtensions from \"../extensions\";\n\n\nexport function getMarkdownSpec(extension) {\n    const markdownSpec = extension.storage?.markdown;\n    const defaultMarkdownSpec = markdownExtensions.find(e => e.name === extension.name)?.storage.markdown;\n\n    if(markdownSpec || defaultMarkdownSpec) {\n        return {\n            ...defaultMarkdownSpec,\n            ...markdownSpec,\n        };\n    }\n\n    return null;\n}\n","import markdownit from \"markdown-it\";\n\nimport { elementFromString, extractElement, unwrapElement } from \"../util/dom\";\nimport { getMarkdownSpec } from \"../util/extensions\";\nimport { decode } from \"he\";\n\nexport class MarkdownParser {\n  /**\n   * @type {import('@tiptap/core').Editor}\n   */\n  editor = null;\n  /**\n   * @type {markdownit}\n   */\n  md = null;\n\n  constructor(editor, { html, linkify, breaks, ignoreRegex }) {\n    this.editor = editor;\n    this.md = this.withPatchedRenderer(\n      markdownit({\n        html,\n        linkify,\n        breaks,\n      })\n    );\n    this.ignoreRegex = ignoreRegex;\n  }\n \n  parse(content, { inline } = {}) {\n    if (typeof content === \"string\") {\n      let processedContent = content;\n\n      const placeholders = new Map();\n\n      let placeholderIndex = 0;\n\n      for (const regex of this.ignoreRegex ?? []) {\n        processedContent = processedContent.replace(regex, (match) => {\n          const placeholder = `IGNORE_${placeholderIndex}`;\n          placeholders.set(placeholder, match);\n          placeholderIndex++;\n          return placeholder;\n        });\n      }\n\n      this.editor.extensionManager.extensions.forEach((extension) =>\n        getMarkdownSpec(extension)?.parse?.setup?.call({ editor: this.editor, options: extension.options }, this.md)\n      );\n\n      const renderedHTML = this.md.render(processedContent);\n\n      const element = elementFromString(renderedHTML);\n\n      this.editor.extensionManager.extensions.forEach((extension) =>\n        getMarkdownSpec(extension)?.parse?.updateDOM?.call({ editor: this.editor, options: extension.options }, element)\n      );\n\n      let finalHTML = element.innerHTML;\n\n      const finalElement = elementFromString(finalHTML);\n      this.normalizeDOM(finalElement, { inline, content });\n\n      finalHTML = finalElement.innerHTML;\n\n      const entries = Array.from(placeholders.entries());\n      for (let i = entries.length - 1; i >= 0; i--) {\n        const [placeholder, original] = entries[i];\n\n        // Modified logic for handling < and >\n        let processedOriginal = original;\n\n        // Add space before < if preceded by a character\n        processedOriginal = processedOriginal.replace(/(\\S)</g, \"$1 <\");\n        // Add space after < if followed by a character\n        processedOriginal = processedOriginal.replace(/<(\\S)/g, \"< $1\");\n\n        // Add space before > if preceded by a character\n        processedOriginal = processedOriginal.replace(/(\\S)>/g, \"$1 >\");\n        // Add space after > if followed by a character\n        processedOriginal = processedOriginal.replace(/>(\\S)/g, \"> $1\");\n\n        finalHTML = finalHTML.split(placeholder).join(processedOriginal);\n      }\n\n      return decode(finalHTML);\n    }\n\n    return content;\n  }\n\n  normalizeDOM(node, { inline, content }) {\n    this.normalizeBlocks(node);\n\n    // remove all \\n appended by markdown-it\n    node.querySelectorAll(\"*\").forEach((el) => {\n      if (el.nextSibling?.nodeType === Node.TEXT_NODE && !el.closest(\"pre\")) {\n        el.nextSibling.textContent = el.nextSibling.textContent.replace(/^\\n/, \"\");\n      }\n    });\n\n    if (inline) {\n      this.normalizeInline(node, content);\n    }\n\n    return node;\n  }\n\n  normalizeBlocks(node) {\n    const blocks = Object.values(this.editor.schema.nodes).filter((node) => node.isBlock);\n\n    const selector = blocks\n      .map((block) => block.spec.parseDOM?.map((spec) => spec.tag))\n      .flat()\n      .filter(Boolean)\n      .join(\",\");\n\n    if (!selector) {\n      return;\n    }\n\n    [...node.querySelectorAll(selector)].forEach((el) => {\n      if (el.parentElement.matches(\"p\")) {\n        extractElement(el);\n      }\n    });\n  }\n\n  normalizeInline(node, content) {\n    if (node.firstElementChild?.matches(\"p\")) {\n      const firstParagraph = node.firstElementChild;\n      const { nextElementSibling } = firstParagraph;\n      const startSpaces = content.match(/^\\s+/)?.[0] ?? \"\";\n      const endSpaces = !nextElementSibling ? (content.match(/\\s+$/)?.[0] ?? \"\") : \"\";\n\n      if (content.match(/^\\n\\n/)) {\n        firstParagraph.innerHTML = `${firstParagraph.innerHTML}${endSpaces}`;\n        return;\n      }\n\n      unwrapElement(firstParagraph);\n\n      node.innerHTML = `${startSpaces}${node.innerHTML}${endSpaces}`;\n    }\n  }\n\n  /**\n   * @param {markdownit} md\n   */\n  withPatchedRenderer(md) {\n    const withoutNewLine =\n      (renderer) =>\n      (...args) => {\n        const rendered = renderer(...args);\n        if (rendered === \"\\n\") {\n          return rendered; // keep soft breaks\n        }\n        if (rendered[rendered.length - 1] === \"\\n\") {\n          return rendered.slice(0, -1);\n        }\n        return rendered;\n      };\n\n    md.renderer.rules.hardbreak = withoutNewLine(md.renderer.rules.hardbreak);\n    md.renderer.rules.softbreak = withoutNewLine(md.renderer.rules.softbreak);\n    md.renderer.rules.fence = withoutNewLine(md.renderer.rules.fence);\n    md.renderer.rules.code_block = withoutNewLine(md.renderer.rules.code_block);\n    md.renderer.renderToken = withoutNewLine(md.renderer.renderToken.bind(md.renderer));\n\n    return md;\n  }\n}\n","import markdownit from 'markdown-it';\n\nconst md = markdownit();\n\nfunction scanDelims(text, pos) {\n    md.inline.State.prototype.scanDelims.call({ src: text, posMax: text.length })\n    const state = new (md.inline.State)(text, null, null, []);\n    return state.scanDelims(pos, true);\n}\n\nexport function shiftDelim(text, delim, start, offset) {\n    let res = text.substring(0, start) + text.substring(start + delim.length);\n    res = res.substring(0, start + offset) + delim + res.substring(start + offset);\n    return res;\n}\n\nfunction trimStart(text, delim, from, to) {\n    let pos = from, res = text;\n    while(pos < to) {\n        if(scanDelims(res, pos).can_open) {\n            break;\n        }\n        res = shiftDelim(res, delim, pos, 1);\n        pos++;\n    }\n    return { text: res, from: pos, to }\n}\n\nfunction trimEnd(text, delim, from, to) {\n    let pos = to, res = text;\n    while(pos > from) {\n        if(scanDelims(res, pos).can_close) {\n            break;\n        }\n        res = shiftDelim(res, delim, pos, -1);\n        pos--;\n    }\n    return { text: res, from, to: pos }\n}\n\nexport function trimInline(text, delim, from, to) {\n    let state = {\n        text,\n        from,\n        to,\n    }\n\n    state = trimStart(state.text, delim, state.from, state.to);\n    state = trimEnd(state.text, delim, state.from, state.to);\n\n    if(state.to - state.from < delim.length + 1) {\n        state.text = state.text.substring(0, state.from) + state.text.substring(state.to + delim.length);\n    }\n\n    return state.text;\n}\n","import { MarkdownSerializerState as BaseMarkdownSerializerState } from \"prosemirror-markdown\";\nimport { trimInline } from \"../util/markdown\";\n\n\n/**\n * Override default MarkdownSerializerState to:\n * - handle commonmark delimiters (https://spec.commonmark.org/0.29/#left-flanking-delimiter-run)\n */\nexport class MarkdownSerializerState extends BaseMarkdownSerializerState {\n\n    inTable = false;\n\n    constructor(nodes, marks, options) {\n        super(nodes, marks, options ?? {});\n        this.inlines = [];\n    }\n\n    render(node, parent, index) {\n        super.render(node, parent, index);\n        const top = this.inlines[this.inlines.length - 1];\n        if(top?.start && top?.end) {\n            const { delimiter, start, end } = this.normalizeInline(top);\n            this.out = trimInline(this.out, delimiter, start, end);\n            this.inlines.pop();\n        }\n    }\n\n    markString(mark, open, parent, index) {\n        const info = this.marks[mark.type.name]\n        if(info.expelEnclosingWhitespace) {\n            if(open) {\n                this.inlines.push({\n                    start: this.out.length,\n                    delimiter: info.open,\n                });\n            } else {\n                const top = this.inlines.pop();\n                this.inlines.push({\n                    ...top,\n                    end: this.out.length,\n                });\n            }\n        }\n        return super.markString(mark, open, parent, index);\n    }\n\n    normalizeInline(inline) {\n        let { start, end } = inline;\n        while(this.out.charAt(start).match(/\\s/)) {\n            start++;\n        }\n        return {\n            ...inline,\n            start,\n        }\n    }\n}\n","import { MarkdownSerializerState } from './state';\nimport HTMLMark from \"../extensions/marks/html\";\nimport HTMLNode from \"../extensions/nodes/html\";\nimport { getMarkdownSpec } from \"../util/extensions\";\nimport HardBreak from \"../extensions/nodes/hard-break\";\n\n\nexport class MarkdownSerializer {\n    /**\n     * @type {import('@tiptap/core').Editor}\n     */\n    editor = null;\n\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    serialize(content) {\n        const state = new MarkdownSerializerState(this.nodes, this.marks, {\n            hardBreakNodeName: HardBreak.name,\n        });\n\n        state.renderContent(content);\n\n        return state.out;\n    }\n\n    get nodes() {\n        return {\n            ...Object.fromEntries(\n                Object.keys(this.editor.schema.nodes)\n                    .map(name => [name, this.serializeNode(HTMLNode)])\n            ),\n            ...Object.fromEntries(\n                this.editor.extensionManager.extensions\n                    .filter(extension => extension.type === 'node' && this.serializeNode(extension))\n                    .map(extension => [extension.name, this.serializeNode(extension)])\n                ?? []\n            ),\n        };\n    }\n\n    get marks() {\n        return {\n            ...Object.fromEntries(\n                Object.keys(this.editor.schema.marks)\n                    .map(name => [name, this.serializeMark(HTMLMark)])\n            ),\n            ...Object.fromEntries(\n                this.editor.extensionManager.extensions\n                    .filter(extension => extension.type === 'mark' && this.serializeMark(extension))\n                    .map(extension => [extension.name, this.serializeMark(extension)])\n                ?? []\n            ),\n        };\n    }\n\n    serializeNode(node) {\n        return getMarkdownSpec(node)?.serialize?.bind({ editor: this.editor, options: node.options });\n    }\n\n    serializeMark(mark) {\n        const serialize = getMarkdownSpec(mark)?.serialize;\n        return serialize\n            ? {\n                ...serialize,\n                open: typeof serialize.open === 'function' ? serialize.open.bind({ editor: this.editor, options: mark.options }) : serialize.open,\n                close: typeof serialize.close === 'function' ? serialize.close.bind({ editor: this.editor, options: mark.options }) : serialize.close,\n            }\n            : null\n    }\n}\n\n","import { Extension, extensions } from \"@tiptap/core\";\n\nimport { MarkdownClipboard } from \"./extensions/tiptap/clipboard\";\nimport { MarkdownTightLists } from \"./extensions/tiptap/tight-lists\";\nimport { MarkdownParser } from \"./parse/MarkdownParser\";\nimport { MarkdownSerializer } from \"./serialize/MarkdownSerializer\";\n\nexport const Markdown = Extension.create({\n  name: \"markdown\",\n  priority: 50,\n  addOptions() {\n    return {\n      html: true,\n      tightLists: true,\n      tightListClass: \"tight\",\n      bulletListMarker: \"-\",\n      linkify: false,\n      breaks: false,\n      transformPastedText: false,\n      transformCopiedText: false,\n      ignoreRegex: [],\n    };\n  },\n  addCommands() {\n    const commands = extensions.Commands.config.addCommands();\n    return {\n      setContent: (content, emitUpdate, parseOptions) => (props) => {\n        return commands.setContent(\n          props.editor.storage.markdown.parser.parse(content),\n          emitUpdate,\n          parseOptions\n        )(props);\n      },\n      insertContentAt: (range, content, options) => (props) => {\n        return commands.insertContentAt(\n          range,\n          props.editor.storage.markdown.parser.parse(content, { inline: true }),\n          options\n        )(props);\n      },\n    };\n  },\n  onBeforeCreate() {\n    this.editor.storage.markdown = {\n      options: { ...this.options },\n      parser: new MarkdownParser(this.editor, this.options, this.options.ignoreRegex),\n      serializer: new MarkdownSerializer(this.editor),\n      getMarkdown: () => {\n        return this.editor.storage.markdown.serializer.serialize(this.editor.state.doc);\n      },\n    };\n    this.editor.options.initialContent = this.editor.options.content;\n    this.editor.options.content = this.editor.storage.markdown.parser.parse(this.editor.options.content);\n  },\n  onCreate() {\n    this.editor.options.content = this.editor.options.initialContent;\n    delete this.editor.options.initialContent;\n  },\n  addStorage() {\n    return {\n      /// storage will be defined in onBeforeCreate() to prevent initial object overriding\n    };\n  },\n  addExtensions() {\n    return [\n      MarkdownTightLists.configure({\n        tight: this.options.tightLists,\n        tightClass: this.options.tightListClass,\n      }),\n      MarkdownClipboard.configure({\n        transformPastedText: this.options.transformPastedText,\n        transformCopiedText: this.options.transformCopiedText,\n      }),\n    ];\n  },\n});\n"],"names":["elementFromString","value","wrappedValue","window","DOMParser","parseFromString","body","escapeHTML","replace","extractElement","node","parent","parentElement","prepend","cloneNode","firstChild","appendChild","childNodes","length","insertBefore","remove","unwrapElement","parentNode","removeChild","MarkdownClipboard","Extension","create","name","addOptions","transformPastedText","transformCopiedText","addProseMirrorPlugins","Plugin","key","PluginKey","props","clipboardTextParser","text","context","plainText","options","parsed","editor","storage","markdown","parser","parse","inline","fromSchema","schema","parseSlice","preserveWhitespace","clipboardTextSerializer","slice","serializer","serialize","content","MarkdownTightLists","tight","tightClass","listTypes","addGlobalAttributes","types","attributes","default","parseHTML","element","getAttribute","querySelector","renderHTML","class","addCommands","_this","toggleTight","arguments","undefined","_ref","commands","isActive","attrs","getAttributes","updateAttributes","some","Blockquote","Node","extend","addStorage","defaultMarkdownSerializer","nodes","blockquote","BulletList","state","renderList","bulletListMarker","CodeBlock","write","language","textContent","ensureNewLine","closeBlock","setup","markdownit","_this$options$languag","set","langPrefix","languageClassPrefix","updateDOM","innerHTML","html","serializeHTML","console","warn","type","isBlock","getHTMLFromFragment","Fragment","from","topNodeType","formatBlock","dom","firstElementChild","trim","outerHTML","HardBreak","index","i","childCount","child","inTable","HTMLNode","call","Heading","heading","HorizontalRule","horizontal_rule","Image","image","ListItem","list_item","OrderedList","findIndexOfAdjacentNode","start","maxW","String","space","repeat","adjacentIndex","separator","nStr","Paragraph","paragraph","_node$content$content","_node$content","Table","isMarkdownSerializable","forEach","row","p","col","j","cellContent","renderInline","delimiterRow","Array","map","join","hasSpan","colspan","rowspan","rows","firstRow","bodyRows","cell","TaskItem","check","checked","renderContent","querySelectorAll","item","input","setAttribute","TaskList","use","taskListPlugin","list","Text","Bold","Mark","marks","strong","Code","code","open","mark","_getMarkTags$","_getMarkTags","getMarkTags","close","_getMarkTags$2","_getMarkTags2","match","Italic","em","Link","link","Strike","expelEnclosingWhitespace","HTMLMark","getMarkdownSpec","extension","_extension$storage","_markdownExtensions$f","markdownSpec","defaultMarkdownSpec","markdownExtensions","find","e","MarkdownParser","constructor","md","linkify","breaks","ignoreRegex","withPatchedRenderer","processedContent","placeholders","Map","placeholderIndex","regex","_this$ignoreRegex","placeholder","extensionManager","extensions","_getMarkdownSpec","renderedHTML","render","_getMarkdownSpec2","finalHTML","finalElement","normalizeDOM","entries","original","processedOriginal","split","decode","_ref2","normalizeBlocks","el","_el$nextSibling","nextSibling","nodeType","TEXT_NODE","closest","normalizeInline","blocks","Object","values","filter","selector","block","_block$spec$parseDOM","spec","parseDOM","tag","flat","Boolean","matches","_node$firstElementChi","_content$match$","_content$match","_content$match$2","_content$match2","firstParagraph","nextElementSibling","startSpaces","endSpaces","withoutNewLine","renderer","rendered","rules","hardbreak","softbreak","fence","code_block","renderToken","bind","scanDelims","pos","State","prototype","src","posMax","shiftDelim","delim","offset","res","substring","trimStart","to","can_open","trimEnd","can_close","trimInline","MarkdownSerializerState","BaseMarkdownSerializerState","inlines","top","end","delimiter","out","pop","markString","info","push","charAt","MarkdownSerializer","hardBreakNodeName","_this$editor$extensio","fromEntries","keys","serializeNode","_this$editor$extensio2","serializeMark","Markdown","priority","tightLists","tightListClass","Commands","config","setContent","emitUpdate","parseOptions","insertContentAt","range","onBeforeCreate","getMarkdown","doc","initialContent","onCreate","addExtensions","configure"],"mappings":"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"}