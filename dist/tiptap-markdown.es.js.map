{"version":3,"file":"tiptap-markdown.es.js","sources":["../src/util/dom.js","../src/extensions/tiptap/clipboard.js","../src/extensions/tiptap/tight-lists.js","../src/extensions/nodes/blockquote.js","../src/extensions/nodes/bullet-list.js","../src/extensions/nodes/code-block.js","../src/extensions/nodes/html.js","../src/extensions/nodes/hard-break.js","../src/extensions/nodes/heading.js","../src/extensions/nodes/horizontal-rule.js","../src/extensions/nodes/image.js","../src/extensions/nodes/list-item.js","../src/extensions/nodes/ordered-list.js","../src/extensions/nodes/paragraph.js","../src/util/prosemirror.js","../src/extensions/nodes/table.js","../src/extensions/nodes/task-item.js","../src/extensions/nodes/task-list.js","../src/extensions/nodes/text.js","../src/extensions/marks/bold.js","../src/extensions/marks/code.js","../src/extensions/marks/html.js","../src/extensions/marks/italic.js","../src/extensions/marks/link.js","../src/extensions/marks/strike.js","../src/extensions/index.js","../src/util/extensions.js","../src/parse/MarkdownParser.js","../src/util/markdown.js","../src/serialize/state.js","../src/serialize/MarkdownSerializer.js","../src/Markdown.js"],"sourcesContent":["\n\nexport function elementFromString(value) {\n    // add a wrapper to preserve leading and trailing whitespace\n    const wrappedValue = `<body>${value}</body>`\n\n    return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n\nexport function escapeHTML(value) {\n    return value\n        ?.replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n\nexport function extractElement(node) {\n    const parent = node.parentElement;\n    const prepend = parent.cloneNode();\n\n    while(parent.firstChild && parent.firstChild !== node) {\n        prepend.appendChild(parent.firstChild);\n    }\n\n    if(prepend.childNodes.length > 0) {\n        parent.parentElement.insertBefore(prepend, parent);\n    }\n    parent.parentElement.insertBefore(node, parent);\n    if(parent.childNodes.length === 0) {\n        parent.remove();\n    }\n}\n\nexport function unwrapElement(node) {\n    const parent = node.parentNode;\n\n    while (node.firstChild) parent.insertBefore(node.firstChild, node);\n\n    parent.removeChild(node);\n}\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\nimport { DOMParser } from '@tiptap/pm/model';\nimport { elementFromString } from \"../../util/dom\";\n\nexport const MarkdownClipboard = Extension.create({\n    name: 'markdownClipboard',\n    addOptions() {\n        return {\n            transformPastedText: false,\n            transformCopiedText: false,\n        }\n    },\n    addProseMirrorPlugins() {\n        return [\n            new Plugin({\n                key: new PluginKey('markdownClipboard'),\n                props: {\n                    clipboardTextParser: (text, context, plainText) => {\n                        if(plainText || !this.options.transformPastedText) {\n                            return null; // pasting with shift key prevents formatting\n                        }\n                        const parsed = this.editor.storage.markdown.parser.parse(text, { inline: true });\n                        return DOMParser.fromSchema(this.editor.schema)\n                            .parseSlice(elementFromString(parsed), {\n                                preserveWhitespace: true,\n                                context,\n                            });\n                    },\n                    /**\n                     * @param {import('prosemirror-model').Slice} slice\n                     */\n                    clipboardTextSerializer: (slice) => {\n                        if(!this.options.transformCopiedText) {\n                            return null;\n                        }\n                        return this.editor.storage.markdown.serializer.serialize(slice.content);\n                    },\n                },\n            })\n        ]\n    }\n})\n","import { Extension } from \"@tiptap/core\";\n\nexport const MarkdownTightLists = Extension.create({\n    name: 'markdownTightLists',\n    addOptions: () => ({\n        tight: true,\n        tightClass: 'tight',\n        listTypes: [\n            'bulletList',\n            'orderedList',\n        ],\n    }),\n    addGlobalAttributes() {\n        return [\n            {\n                types: this.options.listTypes,\n                attributes: {\n                    tight: {\n                        default: this.options.tight,\n                        parseHTML: element =>\n                            element.getAttribute('data-tight') === 'true' || !element.querySelector('p'),\n                        renderHTML: attributes => ({\n                            class: attributes.tight ? this.options.tightClass : null,\n                            'data-tight': attributes.tight ? 'true' : null,\n                        }),\n                    },\n                },\n            },\n        ]\n    },\n    addCommands() {\n        return {\n            toggleTight: (tight = null) => ({ editor, commands }) => {\n                function toggleTight(name) {\n                    if(!editor.isActive(name)) {\n                        return false;\n                    }\n                    const attrs = editor.getAttributes(name);\n                    return commands.updateAttributes(name, {\n                        tight: tight ?? !attrs?.tight,\n                    });\n                }\n                return this.options.listTypes\n                    .some(name => toggleTight(name));\n            }\n        }\n    },\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Blockquote = Node.create({\n    name: 'blockquote',\n});\n\nexport default Blockquote.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.blockquote,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst BulletList = Node.create({\n    name: 'bulletList',\n});\n\nexport default BulletList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    return state.renderList(node, \"  \", () => (this.editor.storage.markdown.options.bulletListMarker || \"-\") + \" \");\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst CodeBlock = Node.create({\n    name: 'codeBlock',\n});\n\nexport default CodeBlock.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    state.write(\"```\" + (node.attrs.language || \"\") + \"\\n\");\n                    state.text(node.textContent, false);\n                    state.ensureNewLine();\n                    state.write(\"```\");\n                    state.closeBlock(node);\n                },\n                parse: {\n                    setup(markdownit) {\n                        markdownit.set({\n                            langPrefix: this.options.languageClassPrefix ?? 'language-',\n                        });\n                    },\n                    updateDOM(element) {\n                        element.innerHTML = element.innerHTML.replace(/\\n<\\/code><\\/pre>/g, '</code></pre>')\n                    },\n                },\n            }\n        }\n    }\n});\n","import { Fragment } from \"@tiptap/pm/model\";\nimport { getHTMLFromFragment, Node } from \"@tiptap/core\";\nimport { elementFromString } from \"../../util/dom\";\n\n\nexport default Node.create({\n    name: 'markdownHTMLNode',\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent) {\n                    if(this.editor.storage.markdown.options.html) {\n                        state.write(serializeHTML(node, parent));\n                    } else {\n                        console.warn(`Tiptap Markdown: \"${node.type.name}\" node is only available in html mode`);\n                        state.write(`[${node.type.name}]`);\n                    }\n                    if(node.isBlock) {\n                        state.closeBlock(node);\n                    }\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n\nfunction serializeHTML(node, parent) {\n    const schema = node.type.schema;\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\n\n    if(node.isBlock && (parent instanceof Fragment || parent.type.name === schema.topNodeType.name)) {\n        return formatBlock(html);\n    }\n\n    return html;\n}\n\n/**\n * format html block as per the commonmark spec\n */\nfunction formatBlock(html) {\n    const dom = elementFromString(html);\n    const element = dom.firstElementChild;\n\n    element.innerHTML = element.innerHTML.trim()\n        ? `\\n${element.innerHTML}\\n`\n        : `\\n`;\n\n    return element.outerHTML;\n}\n","import { Node } from \"@tiptap/core\";\nimport HTMLNode from './html';\n\nconst HardBreak = Node.create({\n    name: 'hardBreak',\n});\n\nexport default HardBreak.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent, index) {\n                    for (let i = index + 1; i < parent.childCount; i++)\n                        if (parent.child(i).type != node.type) {\n                            state.write(\n                                state.inTable\n                                    ? HTMLNode.storage.markdown.serialize.call(this, state, node, parent)\n                                    : \"\\\\\\n\"\n                            );\n                            return;\n                        }\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Heading = Node.create({\n    name: 'heading',\n});\n\nexport default Heading.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.heading,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst HorizontalRule = Node.create({\n    name: 'horizontalRule',\n});\n\nexport default HorizontalRule.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.horizontal_rule,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Image = Node.create({\n    name: 'image',\n});\n\nexport default Image.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.image,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst ListItem = Node.create({\n    name: 'listItem',\n});\n\nexport default ListItem.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.list_item,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst OrderedList = Node.create({\n    name: 'orderedList',\n});\n\nfunction findIndexOfAdjacentNode(node, parent, index) {\n    let i = 0;\n    for (; index - i > 0; i++) {\n        if (parent.child(index - i - 1).type.name !== node.type.name) {\n            break;\n        }\n    }\n    return i;\n}\n\nexport default OrderedList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent, index) {\n                    const start = node.attrs.start || 1\n                    const maxW = String(start + node.childCount - 1).length\n                    const space = state.repeat(\" \", maxW + 2)\n                    const adjacentIndex = findIndexOfAdjacentNode(node, parent, index);\n                    const separator = adjacentIndex % 2 ? ') ' : '. ';\n                    state.renderList(node, space, i => {\n                        const nStr = String(start + i)\n                        return state.repeat(\" \", maxW - nStr.length) + nStr + separator;\n                    })\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Paragraph = Node.create({\n    name: 'paragraph',\n});\n\nexport default Paragraph.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.paragraph,\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n","\n\nexport function childNodes(node) {\n    return node?.content?.content ?? [];\n}\n","import { Node } from \"@tiptap/core\";\nimport { childNodes } from \"../../util/prosemirror\";\nimport HTMLNode from './html';\n\nconst Table = Node.create({\n    name: 'table',\n});\n\nexport default Table.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent) {\n                    if(!isMarkdownSerializable(node)) {\n                        HTMLNode.storage.markdown.serialize.call(this, state, node, parent);\n                        return;\n                    }\n                    state.inTable = true;\n                    node.forEach((row, p, i) => {\n                        state.write('| ');\n                        row.forEach((col, p, j) => {\n                            if(j) {\n                                state.write(' | ');\n                            }\n                            const cellContent = col.firstChild;\n                            if(cellContent.textContent.trim()) {\n                                state.renderInline(cellContent);\n                            }\n                        });\n                        state.write(' |')\n                        state.ensureNewLine();\n                        if(!i) {\n                            const delimiterRow = Array.from({length: row.childCount}).map(() => '---').join(' | ');\n                            state.write(`| ${delimiterRow} |`);\n                            state.ensureNewLine();\n                        }\n                    });\n                    state.closeBlock(node);\n                    state.inTable = false;\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n})\n\n\nfunction hasSpan(node) {\n    return node.attrs.colspan > 1 || node.attrs.rowspan > 1;\n}\n\nfunction isMarkdownSerializable(node) {\n    const rows = childNodes(node);\n    const firstRow = rows[0];\n    const bodyRows = rows.slice(1);\n\n    if(childNodes(firstRow).some(cell => cell.type.name !== 'tableHeader' || hasSpan(cell) || cell.childCount > 1)) {\n        return false;\n    }\n\n    if(bodyRows.some(row =>\n        childNodes(row).some(cell => cell.type.name === 'tableHeader' || hasSpan(cell) || cell.childCount > 1)\n    )) {\n        return false;\n    }\n\n    return true;\n}\n","import { Node } from \"@tiptap/core\";\n\n\nconst TaskItem = Node.create({\n    name: 'taskItem',\n});\n\nexport default TaskItem.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    const check = node.attrs.checked ? '[x]' : '[ ]';\n                    state.write(`${check} `);\n                    state.renderContent(node);\n                },\n                parse: {\n                    updateDOM(element) {\n                        [...element.querySelectorAll('.task-list-item')]\n                            .forEach(item => {\n                                const input = item.querySelector('input');\n                                item.setAttribute('data-type', 'taskItem');\n                                if(input) {\n                                    item.setAttribute('data-checked', input.checked);\n                                    input.remove();\n                                }\n                            });\n                    },\n                }\n            }\n        }\n    }\n});\n","import taskListPlugin from \"markdown-it-task-lists\";\nimport { Node } from \"@tiptap/core\";\nimport BulletList from \"./bullet-list\";\n\n\nconst TaskList = Node.create({\n    name: 'taskList',\n});\n\nexport default TaskList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: BulletList.storage.markdown.serialize,\n                parse: {\n                    setup(markdownit) {\n                        markdownit.use(taskListPlugin);\n                    },\n                    updateDOM(element) {\n                        [...element.querySelectorAll('.contains-task-list')]\n                            .forEach(list => {\n                                list.setAttribute('data-type', 'taskList');\n                            });\n                    },\n                }\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { escapeHTML } from \"../../util/dom\";\n\n\nconst Text = Node.create({\n    name: 'text',\n});\n\nexport default Text.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    state.text(escapeHTML(node.text));\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Bold = Mark.create({\n    name: 'bold',\n});\n\nexport default Bold.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.strong,\n                parse: {\n                    // handled by markdown-it\n                }\n            },\n        }\n    }\n});\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Code = Mark.create({\n    name: 'code',\n});\n\nexport default Code.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.code,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Fragment } from \"@tiptap/pm/model\";\nimport { getHTMLFromFragment, Mark } from \"@tiptap/core\";\n\n\nexport default Mark.create({\n    name: 'markdownHTMLMark',\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: {\n                    open(state, mark)  {\n                        if(!this.editor.storage.markdown.options.html) {\n                            console.warn(`Tiptap Markdown: \"${mark.type.name}\" mark is only available in html mode`);\n                            return '';\n                        }\n                        return getMarkTags(mark)?.[0] ?? '';\n                    },\n                    close(state, mark) {\n                        if(!this.editor.storage.markdown.options.html) {\n                            return '';\n                        }\n                        return getMarkTags(mark)?.[1] ?? '';\n                    },\n                },\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n});\n\nfunction getMarkTags(mark) {\n    const schema = mark.type.schema;\n    const node = schema.text(' ', [mark]);\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\n    const match = html.match(/^(<.*?>) (<\\/.*?>)$/);\n    return match ? [match[1], match[2]] : null;\n}\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Italic = Mark.create({\n    name: 'italic',\n});\n\nexport default Italic.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.em,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Link = Mark.create({\n    name: 'link',\n});\n\nexport default Link.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.link,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\n\n\nconst Strike = Mark.create({\n    name: 'strike',\n});\n\nexport default Strike.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: {open: '~~', close: '~~', expelEnclosingWhitespace: true},\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n","import Blockquote from \"./nodes/blockquote\";\nimport BulletList from \"./nodes/bullet-list\";\nimport CodeBlock from \"./nodes/code-block\";\nimport HardBreak from \"./nodes/hard-break\";\nimport Heading from \"./nodes/heading\";\nimport HorizontalRule from \"./nodes/horizontal-rule\";\nimport HTMLNode from \"./nodes/html\";\nimport Image from \"./nodes/image\";\nimport ListItem from \"./nodes/list-item\";\nimport OrderedList from \"./nodes/ordered-list\";\nimport Paragraph from \"./nodes/paragraph\";\nimport Table from \"./nodes/table\";\nimport TaskItem from \"./nodes/task-item\";\nimport TaskList from \"./nodes/task-list\";\nimport Text from \"./nodes/text\";\n\nimport Bold from \"./marks/bold\";\nimport Code from \"./marks/code\";\nimport HTMLMark from \"./marks/html\";\nimport Italic from \"./marks/italic\";\nimport Link from \"./marks/link\";\nimport Strike from \"./marks/strike\";\n\n\nexport default [\n    Blockquote,\n    BulletList,\n    CodeBlock,\n    HardBreak,\n    Heading,\n    HorizontalRule,\n    HTMLNode,\n    Image,\n    ListItem,\n    OrderedList,\n    Paragraph,\n    Table,\n    TaskItem,\n    TaskList,\n    Text,\n\n    Bold,\n    Code,\n    HTMLMark,\n    Italic,\n    Link,\n    Strike,\n]\n","import markdownExtensions from \"../extensions\";\n\n\nexport function getMarkdownSpec(extension) {\n    const markdownSpec = extension.storage?.markdown;\n    const defaultMarkdownSpec = markdownExtensions.find(e => e.name === extension.name)?.storage.markdown;\n\n    if(markdownSpec || defaultMarkdownSpec) {\n        return {\n            ...defaultMarkdownSpec,\n            ...markdownSpec,\n        };\n    }\n\n    return null;\n}\n","import markdownit from \"markdown-it\";\n\nimport { elementFromString, extractElement, unwrapElement } from \"../util/dom\";\nimport { getMarkdownSpec } from \"../util/extensions\";\n\nexport class MarkdownParser {\n  /**\n   * @type {import('@tiptap/core').Editor}\n   */\n  editor = null;\n  /**\n   * @type {markdownit}\n   */\n  md = null;\n\n  constructor(editor, { html, linkify, breaks, ignoreRegex }) {\n    this.editor = editor;\n    this.md = this.withPatchedRenderer(\n      markdownit({\n        html,\n        linkify,\n        breaks,\n      })\n    );\n    this.ignoreRegex = ignoreRegex;\n  }\n\n  parse(content, { inline } = {}) {\n    if (typeof content === \"string\") {\n      let processedContent = content;\n\n      const placeholders = new Map();\n\n      let placeholderIndex = 0;\n\n      for (const regex of this.ignoreRegex) {\n        processedContent = processedContent.replace(regex, (match) => {\n          const placeholder = `IGNORE_${placeholderIndex}`;\n          placeholders.set(placeholder, match);\n          placeholderIndex++;\n          return placeholder;\n        });\n      }\n\n      this.editor.extensionManager.extensions.forEach((extension) =>\n        getMarkdownSpec(extension)?.parse?.setup?.call({ editor: this.editor, options: extension.options }, this.md)\n      );\n\n      const renderedHTML = this.md.render(processedContent);\n\n      const element = elementFromString(renderedHTML);\n\n      this.editor.extensionManager.extensions.forEach((extension) =>\n        getMarkdownSpec(extension)?.parse?.updateDOM?.call({ editor: this.editor, options: extension.options }, element)\n      );\n\n      let finalHTML = element.innerHTML;\n\n      const entries = Array.from(placeholders.entries());\n      for (let i = entries.length - 1; i >= 0; i--) {\n        const [placeholder, original] = entries[i];\n        finalHTML = finalHTML.split(placeholder).join(original);\n      }\n\n      const finalElement = elementFromString(finalHTML);\n      this.normalizeDOM(finalElement, { inline, content });\n\n      return finalElement.innerHTML;\n    }\n\n    return content;\n  }\n\n  normalizeDOM(node, { inline, content }) {\n    this.normalizeBlocks(node);\n\n    // remove all \\n appended by markdown-it\n    node.querySelectorAll(\"*\").forEach((el) => {\n      if (el.nextSibling?.nodeType === Node.TEXT_NODE && !el.closest(\"pre\")) {\n        el.nextSibling.textContent = el.nextSibling.textContent.replace(/^\\n/, \"\");\n      }\n    });\n\n    if (inline) {\n      this.normalizeInline(node, content);\n    }\n\n    return node;\n  }\n\n  normalizeBlocks(node) {\n    const blocks = Object.values(this.editor.schema.nodes).filter((node) => node.isBlock);\n\n    const selector = blocks\n      .map((block) => block.spec.parseDOM?.map((spec) => spec.tag))\n      .flat()\n      .filter(Boolean)\n      .join(\",\");\n\n    if (!selector) {\n      return;\n    }\n\n    [...node.querySelectorAll(selector)].forEach((el) => {\n      if (el.parentElement.matches(\"p\")) {\n        extractElement(el);\n      }\n    });\n  }\n\n  normalizeInline(node, content) {\n    if (node.firstElementChild?.matches(\"p\")) {\n      const firstParagraph = node.firstElementChild;\n      const { nextElementSibling } = firstParagraph;\n      const startSpaces = content.match(/^\\s+/)?.[0] ?? \"\";\n      const endSpaces = !nextElementSibling ? (content.match(/\\s+$/)?.[0] ?? \"\") : \"\";\n\n      if (content.match(/^\\n\\n/)) {\n        firstParagraph.innerHTML = `${firstParagraph.innerHTML}${endSpaces}`;\n        return;\n      }\n\n      unwrapElement(firstParagraph);\n\n      node.innerHTML = `${startSpaces}${node.innerHTML}${endSpaces}`;\n    }\n  }\n\n  /**\n   * @param {markdownit} md\n   */\n  withPatchedRenderer(md) {\n    const withoutNewLine =\n      (renderer) =>\n      (...args) => {\n        const rendered = renderer(...args);\n        if (rendered === \"\\n\") {\n          return rendered; // keep soft breaks\n        }\n        if (rendered[rendered.length - 1] === \"\\n\") {\n          return rendered.slice(0, -1);\n        }\n        return rendered;\n      };\n\n    md.renderer.rules.hardbreak = withoutNewLine(md.renderer.rules.hardbreak);\n    md.renderer.rules.softbreak = withoutNewLine(md.renderer.rules.softbreak);\n    md.renderer.rules.fence = withoutNewLine(md.renderer.rules.fence);\n    md.renderer.rules.code_block = withoutNewLine(md.renderer.rules.code_block);\n    md.renderer.renderToken = withoutNewLine(md.renderer.renderToken.bind(md.renderer));\n\n    return md;\n  }\n}\n","import markdownit from 'markdown-it';\n\nconst md = markdownit();\n\nfunction scanDelims(text, pos) {\n    md.inline.State.prototype.scanDelims.call({ src: text, posMax: text.length })\n    const state = new (md.inline.State)(text, null, null, []);\n    return state.scanDelims(pos, true);\n}\n\nexport function shiftDelim(text, delim, start, offset) {\n    let res = text.substring(0, start) + text.substring(start + delim.length);\n    res = res.substring(0, start + offset) + delim + res.substring(start + offset);\n    return res;\n}\n\nfunction trimStart(text, delim, from, to) {\n    let pos = from, res = text;\n    while(pos < to) {\n        if(scanDelims(res, pos).can_open) {\n            break;\n        }\n        res = shiftDelim(res, delim, pos, 1);\n        pos++;\n    }\n    return { text: res, from: pos, to }\n}\n\nfunction trimEnd(text, delim, from, to) {\n    let pos = to, res = text;\n    while(pos > from) {\n        if(scanDelims(res, pos).can_close) {\n            break;\n        }\n        res = shiftDelim(res, delim, pos, -1);\n        pos--;\n    }\n    return { text: res, from, to: pos }\n}\n\nexport function trimInline(text, delim, from, to) {\n    let state = {\n        text,\n        from,\n        to,\n    }\n\n    state = trimStart(state.text, delim, state.from, state.to);\n    state = trimEnd(state.text, delim, state.from, state.to);\n\n    if(state.to - state.from < delim.length + 1) {\n        state.text = state.text.substring(0, state.from) + state.text.substring(state.to + delim.length);\n    }\n\n    return state.text;\n}\n","import { MarkdownSerializerState as BaseMarkdownSerializerState } from \"prosemirror-markdown\";\nimport { trimInline } from \"../util/markdown\";\n\n\n/**\n * Override default MarkdownSerializerState to:\n * - handle commonmark delimiters (https://spec.commonmark.org/0.29/#left-flanking-delimiter-run)\n */\nexport class MarkdownSerializerState extends BaseMarkdownSerializerState {\n\n    inTable = false;\n\n    constructor(nodes, marks, options) {\n        super(nodes, marks, options ?? {});\n        this.inlines = [];\n    }\n\n    render(node, parent, index) {\n        super.render(node, parent, index);\n        const top = this.inlines[this.inlines.length - 1];\n        if(top?.start && top?.end) {\n            const { delimiter, start, end } = this.normalizeInline(top);\n            this.out = trimInline(this.out, delimiter, start, end);\n            this.inlines.pop();\n        }\n    }\n\n    markString(mark, open, parent, index) {\n        const info = this.marks[mark.type.name]\n        if(info.expelEnclosingWhitespace) {\n            if(open) {\n                this.inlines.push({\n                    start: this.out.length,\n                    delimiter: info.open,\n                });\n            } else {\n                const top = this.inlines.pop();\n                this.inlines.push({\n                    ...top,\n                    end: this.out.length,\n                });\n            }\n        }\n        return super.markString(mark, open, parent, index);\n    }\n\n    normalizeInline(inline) {\n        let { start, end } = inline;\n        while(this.out.charAt(start).match(/\\s/)) {\n            start++;\n        }\n        return {\n            ...inline,\n            start,\n        }\n    }\n}\n","import { MarkdownSerializerState } from './state';\nimport HTMLMark from \"../extensions/marks/html\";\nimport HTMLNode from \"../extensions/nodes/html\";\nimport { getMarkdownSpec } from \"../util/extensions\";\nimport HardBreak from \"../extensions/nodes/hard-break\";\n\n\nexport class MarkdownSerializer {\n    /**\n     * @type {import('@tiptap/core').Editor}\n     */\n    editor = null;\n\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    serialize(content) {\n        const state = new MarkdownSerializerState(this.nodes, this.marks, {\n            hardBreakNodeName: HardBreak.name,\n        });\n\n        state.renderContent(content);\n\n        return state.out;\n    }\n\n    get nodes() {\n        return {\n            ...Object.fromEntries(\n                Object.keys(this.editor.schema.nodes)\n                    .map(name => [name, this.serializeNode(HTMLNode)])\n            ),\n            ...Object.fromEntries(\n                this.editor.extensionManager.extensions\n                    .filter(extension => extension.type === 'node' && this.serializeNode(extension))\n                    .map(extension => [extension.name, this.serializeNode(extension)])\n                ?? []\n            ),\n        };\n    }\n\n    get marks() {\n        return {\n            ...Object.fromEntries(\n                Object.keys(this.editor.schema.marks)\n                    .map(name => [name, this.serializeMark(HTMLMark)])\n            ),\n            ...Object.fromEntries(\n                this.editor.extensionManager.extensions\n                    .filter(extension => extension.type === 'mark' && this.serializeMark(extension))\n                    .map(extension => [extension.name, this.serializeMark(extension)])\n                ?? []\n            ),\n        };\n    }\n\n    serializeNode(node) {\n        return getMarkdownSpec(node)?.serialize?.bind({ editor: this.editor, options: node.options });\n    }\n\n    serializeMark(mark) {\n        const serialize = getMarkdownSpec(mark)?.serialize;\n        return serialize\n            ? {\n                ...serialize,\n                open: typeof serialize.open === 'function' ? serialize.open.bind({ editor: this.editor, options: mark.options }) : serialize.open,\n                close: typeof serialize.close === 'function' ? serialize.close.bind({ editor: this.editor, options: mark.options }) : serialize.close,\n            }\n            : null\n    }\n}\n\n","import { Extension, extensions } from \"@tiptap/core\";\n\nimport { MarkdownClipboard } from \"./extensions/tiptap/clipboard\";\nimport { MarkdownTightLists } from \"./extensions/tiptap/tight-lists\";\nimport { MarkdownParser } from \"./parse/MarkdownParser\";\nimport { MarkdownSerializer } from \"./serialize/MarkdownSerializer\";\n\nexport const Markdown = Extension.create({\n  name: \"markdown\",\n  priority: 50,\n  addOptions() {\n    return {\n      html: true,\n      tightLists: true,\n      tightListClass: \"tight\",\n      bulletListMarker: \"-\",\n      linkify: false,\n      breaks: false,\n      transformPastedText: false,\n      transformCopiedText: false,\n      ignoreRegex: [],\n    };\n  },\n  addCommands() {\n    const commands = extensions.Commands.config.addCommands();\n    return {\n      setContent: (content, emitUpdate, parseOptions) => (props) => {\n        return commands.setContent(\n          props.editor.storage.markdown.parser.parse(content),\n          emitUpdate,\n          parseOptions\n        )(props);\n      },\n      insertContentAt: (range, content, options) => (props) => {\n        return commands.insertContentAt(\n          range,\n          props.editor.storage.markdown.parser.parse(content, { inline: true }),\n          options\n        )(props);\n      },\n    };\n  },\n  onBeforeCreate() {\n    this.editor.storage.markdown = {\n      options: { ...this.options },\n      parser: new MarkdownParser(this.editor, this.options, this.options.ignoreRegex),\n      serializer: new MarkdownSerializer(this.editor),\n      getMarkdown: () => {\n        return this.editor.storage.markdown.serializer.serialize(this.editor.state.doc);\n      },\n    };\n    this.editor.options.initialContent = this.editor.options.content;\n    this.editor.options.content = this.editor.storage.markdown.parser.parse(this.editor.options.content);\n  },\n  onCreate() {\n    this.editor.options.content = this.editor.options.initialContent;\n    delete this.editor.options.initialContent;\n  },\n  addStorage() {\n    return {\n      /// storage will be defined in onBeforeCreate() to prevent initial object overriding\n    };\n  },\n  addExtensions() {\n    return [\n      MarkdownTightLists.configure({\n        tight: this.options.tightLists,\n        tightClass: this.options.tightListClass,\n      }),\n      MarkdownClipboard.configure({\n        transformPastedText: this.options.transformPastedText,\n        transformCopiedText: this.options.transformCopiedText,\n      }),\n    ];\n  },\n});\n"],"names":["elementFromString","value","wrappedValue","window","DOMParser","parseFromString","body","escapeHTML","replace","extractElement","node","parent","parentElement","prepend","cloneNode","firstChild","appendChild","childNodes","length","insertBefore","remove","unwrapElement","parentNode","removeChild","MarkdownClipboard","Extension","create","name","addOptions","transformPastedText","transformCopiedText","addProseMirrorPlugins","Plugin","key","PluginKey","props","clipboardTextParser","text","context","plainText","options","parsed","editor","storage","markdown","parser","parse","inline","fromSchema","schema","parseSlice","preserveWhitespace","clipboardTextSerializer","slice","serializer","serialize","content","MarkdownTightLists","tight","tightClass","listTypes","addGlobalAttributes","types","attributes","default","parseHTML","element","getAttribute","querySelector","renderHTML","class","addCommands","_this","toggleTight","arguments","undefined","_ref","commands","isActive","attrs","getAttributes","updateAttributes","some","Blockquote","Node","extend","addStorage","defaultMarkdownSerializer","nodes","blockquote","BulletList","state","renderList","bulletListMarker","CodeBlock","write","language","textContent","ensureNewLine","closeBlock","setup","markdownit","_this$options$languag","set","langPrefix","languageClassPrefix","updateDOM","innerHTML","html","serializeHTML","console","warn","type","isBlock","getHTMLFromFragment","Fragment","from","topNodeType","formatBlock","dom","firstElementChild","trim","outerHTML","HardBreak","index","i","childCount","child","inTable","HTMLNode","call","Heading","heading","HorizontalRule","horizontal_rule","Image","image","ListItem","list_item","OrderedList","findIndexOfAdjacentNode","start","maxW","String","space","repeat","adjacentIndex","separator","nStr","Paragraph","paragraph","_node$content$content","_node$content","Table","isMarkdownSerializable","forEach","row","p","col","j","cellContent","renderInline","delimiterRow","Array","map","join","hasSpan","colspan","rowspan","rows","firstRow","bodyRows","cell","TaskItem","check","checked","renderContent","querySelectorAll","item","input","setAttribute","TaskList","use","taskListPlugin","list","Text","Bold","Mark","marks","strong","Code","code","open","mark","_getMarkTags$","_getMarkTags","getMarkTags","close","_getMarkTags$2","_getMarkTags2","match","Italic","em","Link","link","Strike","expelEnclosingWhitespace","HTMLMark","getMarkdownSpec","extension","_extension$storage","_markdownExtensions$f","markdownSpec","defaultMarkdownSpec","markdownExtensions","find","e","MarkdownParser","constructor","md","linkify","breaks","ignoreRegex","withPatchedRenderer","processedContent","placeholders","Map","placeholderIndex","regex","placeholder","extensionManager","extensions","_getMarkdownSpec","renderedHTML","render","_getMarkdownSpec2","finalHTML","entries","original","split","finalElement","normalizeDOM","_ref2","normalizeBlocks","el","_el$nextSibling","nextSibling","nodeType","TEXT_NODE","closest","normalizeInline","blocks","Object","values","filter","selector","block","_block$spec$parseDOM","spec","parseDOM","tag","flat","Boolean","matches","_node$firstElementChi","_content$match$","_content$match","_content$match$2","_content$match2","firstParagraph","nextElementSibling","startSpaces","endSpaces","withoutNewLine","renderer","rendered","rules","hardbreak","softbreak","fence","code_block","renderToken","bind","scanDelims","pos","State","prototype","src","posMax","shiftDelim","delim","offset","res","substring","trimStart","to","can_open","trimEnd","can_close","trimInline","MarkdownSerializerState","BaseMarkdownSerializerState","inlines","top","end","delimiter","out","pop","markString","info","push","charAt","MarkdownSerializer","hardBreakNodeName","_this$editor$extensio","fromEntries","keys","serializeNode","_this$editor$extensio2","serializeMark","Markdown","priority","tightLists","tightListClass","Commands","config","setContent","emitUpdate","parseOptions","insertContentAt","range","onBeforeCreate","getMarkdown","doc","initialContent","onCreate","addExtensions","configure"],"mappings":"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"}